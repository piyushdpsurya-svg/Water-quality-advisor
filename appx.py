# app.py
# AI-Based Water Quality Advisor (Final Version)
# Created for Educational Use by a First-Year Engineering Student

import streamlit as st
import os
import random

# ---------------------------
# PAGE SETTINGS
# ---------------------------
st.set_page_config(page_title="AI-Based Water Quality Advisor", layout="centered")

# ---------------------------
# HEADER AND INTRODUCTION
# ---------------------------
st.title("üíß AI-Based Water Quality Advisor")

st.markdown("""
### Welcome!
This interactive web app analyzes basic water quality parameters such as **pH**, **TDS (Total Dissolved Solids)**, **Turbidity**, **Color**, and **Smell**.  
It then instantly suggests whether the water is **safe to drink**, **needs further testing**, or **is not suitable for drinking**.

You‚Äôll also see a short explanation and useful **water-safety facts** generated by AI.

üß† *Objective:* To promote awareness about clean drinking water using a simple AI-based approach.*  
‚ö†Ô∏è *Disclaimer:* This app is for educational use only and not a certified laboratory test.*
""")

st.markdown("---")  # divider line

# ---------------------------
# USER INPUT SECTION
# ---------------------------
st.subheader("üîπ Enter Water Parameters")

ph = st.number_input("pH", min_value=0.0, max_value=14.0, value=7.0, step=0.1)
tds = st.number_input("TDS (ppm)", min_value=0, max_value=10000, value=350, step=1)
turb = st.number_input("Turbidity (NTU)", min_value=0.0, max_value=500.0, value=2.0, step=0.1)
color = st.selectbox("Color", ["None", "Slight", "Strong"])
smell = st.selectbox("Smell", ["None", "Mild", "Strong"])

# ---------------------------
# DECISION LOGIC
# ---------------------------
def decide_water(ph, tds, turb, color, smell):
    if ph < 6.0 or ph > 9.0:
        return "Not Drinkable"
    if tds > 1000 or turb > 10 or color == "Strong" or smell == "Strong":
        return "Not Drinkable"
    if tds > 500 or turb > 5 or color == "Slight" or smell == "Mild":
        return "Needs Testing"
    return "Likely Drinkable"

# ---------------------------
# FRIENDLY MESSAGE FUNCTION
# ---------------------------
def friendly_message(decision):
    if decision == "Likely Drinkable":
        title = "üü¢ Likely Drinkable"
        text = "The water quality seems acceptable for drinking based on the given values. Regular testing is always recommended."
    elif decision == "Needs Testing":
        title = "üü° Needs Testing"
        text = "Some parameters are slightly outside the ideal range. It's better to get a laboratory test done before regular consumption."
    else:
        title = "üî¥ Not Drinkable"
        text = "The water parameters indicate poor quality ‚Äî it may be unsafe to drink. Avoid using this water until proper purification or laboratory testing is done."
    return title, text

# ---------------------------
# RANDOM FACTS LIST
# ---------------------------
WATER_FACTS = [
    "Ideal pH for drinking water is usually between 6.5 and 8.5.",
    "High TDS may affect taste but is not always harmful; check specific contaminants for safety.",
    "Turbid (cloudy) water can reduce disinfection effectiveness and indicate contamination.",
    "Unusual color or smell often indicates organic or chemical contamination ‚Äî get a test.",
    "Boiling or filtering suspicious water can improve its safety for household use.",
    "Safe water storage is as important as purification ‚Äî always keep containers clean."
]

# ---------------------------
# MAIN BUTTON ACTION
# ---------------------------
if st.button("üí¶ Check Water Quality"):
    decision = decide_water(ph, tds, turb, color, smell)
    title, message = friendly_message(decision)

    # Display the result neatly
    st.markdown("### Result:")
    st.markdown(f"#### {title}")
    st.write(message)

    # Random helpful water fact
    fact = random.choice(WATER_FACTS)
    st.info("üí° " + fact)

    # ---------------------------
    # OPTIONAL: AI EXPLANATION (OpenAI)
    # ---------------------------
    OPENAI_KEY = os.getenv("OPENAI_API_KEY")
    if OPENAI_KEY:
        try:
            import openai
            openai.api_key = OPENAI_KEY

            prompt = (
                f"Water analysis: pH = {ph}, TDS = {tds} ppm, Turbidity = {turb} NTU, "
                f"Color = {color}, Smell = {smell}. Decision = {decision}.\n\n"
                "Write a simple, friendly explanation (3 short sentences) in plain English for a non-technical person "
                f"explaining why the water is {decision}. Then give 1 clear next step. End with: "
                "'This is an educational tool and not a certified laboratory test.'"
            )

            resp = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=180,
                temperature=0.5
            )
            explanation = resp['choices'][0]['message']['content'].strip()
            st.markdown("### ü§ñ AI Explanation:")
            st.write(explanation)

        except Exception as e:
            st.warning("AI explanation could not be retrieved. Showing a safe fallback summary.")
            st.write(f"The water is judged '{decision}'. Consider filtration, boiling, or a lab test to confirm.")
    else:
        # No API key ‚Äî fallback static message
        st.markdown("### üßæ Explanation:")
        st.write(f"The water is judged '{decision}'. Consider filtration, boiling, or a lab test to confirm.")

# ---------------------------
# FOOTER
# ---------------------------
st.markdown("---")
st.caption("üë®‚Äçüíª Developed as a First-Year Engineering Mini Project | AI-Based Water Quality Advisor | ¬© 2025")
